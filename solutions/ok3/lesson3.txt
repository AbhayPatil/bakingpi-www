Lesson 3 OK3

Lesson 3 focuses on reusable code known in ARM as functions. In the past few lessons we explicitly wrote the instructions line-by-line for simplicity; however, in larger programs this is poor practice as it causes code duplication, poor maintaiability, and decreased readability.  We introduce another file called gpio.s which contains functions to get the GPIO address for a particular pin and set it. In order to access these functions from another file the .globl command is used.
Writing functions can make coding much more organized, but only if it follows a standard.  All functions in ARM follow certain rules so that they can be easily shared.  The rules are as follows:
Registers 0 - 3 are used as inputs
Register 0 always contains the output of the function, followed by register 1 and so on.
Register 4 - 12 must be the same as when the function is entered
If a function must use more registers than 4 the values must be stored on the stack.

In addition to these registers there are also the lr, sp, and pc.  These are expecially important for functions as they tell where to execute instructions after the function is finished.  The PC is the program counter which contains the address of the next instruction.  When a function finishes it should store the address of the next instruction after the function in the main code to the PC.  This is usually done using the LR, which contains the address of this instruction.

With the addition of functions, the code becomes more generic.  These functions give the ability to enable any pin and write to it, not just pin 47 we hard coded earlier.  The main.s file specifies the pin and function and the functions take care of the rest.  This results in much less editing in this lesson than the previous for the Raspberry Pi 2.  I only need to edit the GPIO base address, pin number, and pin function to update this lesson.

The source code can be found below:
-------------------------------------------------------------------------------
MAIN.S
-------------------------------------------------------------------------------
@ Initialization
.section .init
.globl _start
_start:
b main

.section .text
main:
mov sp,#0x8000

@ Credit to user nburman of Raspberry Pi forums who found
@ the new base address and GPIO pin for the ACT LED of the
@ Raspberry Pi 2.

@ Set the GPIO pin
pinNum .req r0
pinFunc .req r1
@ Put 47 in the for the pin number
mov pinNum,#47
@ We want to set the pin high, function 1
mov pinFunc,#1
bl SetGpioFunction
.unreq pinNum
.unreq pinFunc

@ Turn on the LED by setting the GPSET1 register
@ With the 47th bit set
@ Give processor a flash LED task
loop$:
pinNum .req r0
pinVal .req r1
mov pinNum,#47
mov pinVal,#1
bl SetGpio
.unreq pinNum
.unreq pinVal
@ Set the countdown timer
decr .req r0
mov decr,#0x3F0000
wait1$: 
	sub decr,#1
	teq decr,#0
	bne wait1$
.unreq decr

@ When timer expires turn off the LED by setting GPCLR1 register
pinNum .req r0
pinVal .req r1
mov pinNum,#47
mov pinVal,#0
bl SetGpio
.unreq pinNum
.unreq pinVal

@ Reset the countdown timer
decr .req r0
mov decr,#0x3F0000
wait2$:
	sub decr,#1
	teq decr,#0
	bne wait2$
.unreq decr

@ When timer expires turn on the LED by setting the GPSET1 register
b loop$

-------------------------------------------------------------------------------
GPIO.S
-------------------------------------------------------------------------------
.globl GetGpioAddress
GetGpioAddress:
ldr r0,=0x3f200000
mov pc,lr

.globl SetGpioFunction
SetGpioFunction:
    @ Make sure pin number and function are valid
    cmp r0,#53
    cmpls r1,#7
    @ If invalid return back to the code that called
    movhi pc,lr

    @ Store the link register, the address to return to, in the stack
    push {lr}
    @ Put the pin number into r2
    mov r2,r0

    bl GetGpioAddress
    functionLoop$:
        cmp r2,#9
        subhi r2,#10
        addhi r0,#4
        bhi functionLoop$

    add r2, r2,lsl #1
    lsl r1,r2
    str r1,[r0]
    pop {pc}

.globl SetGpio
SetGpio:
    pinNum .req r0
    pinVal .req r1

    cmp pinNum,#53
    movhi pc,lr
    push {lr}
    mov r2,pinNum
    .unreq pinNum
    pinNum .req r2
    bl GetGpioAddress
    gpioAddr .req r0

    pinBank .req r3
    lsr pinBank,pinNum,#5
    lsl pinBank,#2
    add gpioAddr,pinBank
    .unreq pinBank

    and pinNum,#31
    setBit .req r3
    mov setBit,#1
    lsl setBit,pinNum
    .unreq pinNum

    teq pinVal,#0
    .unreq pinVal
    streq setBit,[gpioAddr,#40]
    strne setBit,[gpioAddr,#28]
    .unreq setBit
    .unreq gpioAddr
    pop {pc}
