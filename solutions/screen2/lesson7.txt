Lesson 7 SCREEN02

Screen 2 takes graphics a bit further by implementing the ability to draw lines.  Lines can be used to draw various shapes, but in this lesson we decide to draw a spectrum of lines in a pseudo random fashion.  This results in a cool visualization.  In the simplest form, lines are just a collection of adjacent pixels so the first step is to create a function that colors a pixel at a specific x and y coordinate.  Drawing a pixel requires first initializing the frame buffer and receiving the GPU frame buffer address, width, and height.  After receiving this information we can validate the x and y input coordinates and calculate the address of the pixel to draw.  This address is the frame buffer address + (x + y * width) * pixel size).  Next, we set the pixel color and store it in the pixel address. This effectively paints the pixel that color.

After we have accomplished painting a pixel at a specific x and y coordinate we can move on to drawing a line.  In this lesson we learned Bresenhams Line Algorithm which is the most convenient for ARM assembly because it only requires adding and subtracting calculations.  The algorithm iteratively steps from one x-y coordinate to the goal x-y coordinate, painting pixels in it's path.

The final step was to draw these lines randomly.  It is; however, impossible to create a completely random number though.  All random function need some seed for the function to operate upon.  Calculating a random number with a seed isn't random though, as every function is deterministic.  In this case we just try to come close to random by using a quadtratic function that creates a psuedo random number using the previous x and y coordinate as a seed.  While it isn't random it seems that way.

As in the last lesson there was a single change that needed to be made in the code to make this compatible with the Raspberry Pi 2.  Again we subtract the unchached bus access alias from the GPU pointer address.  Additionally, some changes to the lesson material included an addition to the pseudo code for the Bresenhams Line Algorithm.  I added the calculation of the delta y and step y that wasn't in original into the lesson.